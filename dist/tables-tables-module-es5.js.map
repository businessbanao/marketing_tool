{"version":3,"sources":["webpack:///src/app/pages/tables/smart-table/smart-table.component.ts","webpack:///src/app/pages/tables/smart-table/smart-table.component.html","webpack:///src/app/pages/tables/tables-routing.module.ts","webpack:///src/app/pages/tables/tables.component.ts","webpack:///src/app/pages/tables/tables.module.ts","webpack:///src/app/pages/tables/tree-grid/tree-grid.component.ts","webpack:///src/app/pages/tables/tree-grid/tree-grid.component.html"],"names":["SmartTableComponent","service","_userServices","settings","editable","actions","add","edit","delete","deleteButtonContent","confirmDelete","columns","_id","title","type","fullName","mobile","email","isAccountActive","source","customersList","productList","getCustomerList","event","window","confirm","resolve","reject","fetchCustomersList","subscribe","data","console","log","length","UserList","forEach","cus","slice","undefined","load","onDeleteConfirm","selector","templateUrl","styleUrls","routes","path","component","children","TablesRoutingModule","forChild","imports","exports","routedComponents","TablesComponent","template","TablesModule","declarations","TreeGridComponent","dataSourceBuilder","customColumn","id","firstName","lastName","username","age","defaultColumns","allColumns","sortDirection","NONE","name","size","items","kind","sortRequest","sortColumn","column","direction","index","minWithForMultipleColumns","nextColumnStep","FsIconComponent"],"mappings":"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","file":"tables-tables-module-es5.js","sourcesContent":["import { Component } from '@angular/core';\nimport { LocalDataSource } from 'ng2-smart-table';\n\nimport { SmartTableData } from '../../../@core/data/smart-table';\nimport { UserServices } from '../../../provider/user.services';\n\n@Component({\n  selector: 'ngx-smart-table',\n  templateUrl: './smart-table.component.html',\n  styleUrls: ['./smart-table.component.scss'],\n})\nexport class SmartTableComponent {\n\n  settings = {\n    editable:false,\n    actions:{\n      add: false,\n      edit:false,\n    },\n    // add: {\n    //   addButtonContent: '<i class=\"nb-plus\"></i>',\n    //   createButtonContent: '<i class=\"nb-checkmark\"></i>',\n    //   cancelButtonContent: '<i class=\"nb-close\"></i>',\n    // },\n    // edit: {\n    //   editButtonContent: '<i class=\"nb-edit\"></i>',\n    //   saveButtonContent: '<i class=\"nb-checkmark\"></i>',\n    //   cancelButtonContent: '<i class=\"nb-close\"></i>',\n    // },\n    delete: {\n      deleteButtonContent: '<i class=\"nb-trash\"></i>',\n      confirmDelete: true,\n    },\n    columns: {\n      _id: {\n        title: 'ID',\n        type: 'number',\n      },\n      fullName: {\n        title: 'Name',\n        type: 'string',\n      },\n      mobile: {\n        title: 'Mobile',\n        type: 'string',\n      },\n      email: {\n        title: 'E-mail',\n        type: 'string',\n      },\n\n      isAccountActive: {\n        title: 'Status',\n        type: 'Boolean',\n      },\n    },\n  };\n\n  source: LocalDataSource = new LocalDataSource();\n\n  public customersList: any = []\n  public productList: any = []\n\n\n\n  constructor(private service: SmartTableData, private _userServices: UserServices,) {\n    // const data = this.service.getData();\n    // this.source.load(data);\n    // console.log(data)\n\n  }\n\n  ngOnInit(): void {\n    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.\n    //Add 'implements OnInit' to the class.\n    this.getCustomerList()\n  }\n\n  onDeleteConfirm(event): void {\n    if (window.confirm('Are you sure you want to delete?')) {\n      event.confirm.resolve();\n    } else {\n      event.confirm.reject();\n    }\n  }\n\n  getCustomerList() {\n    this._userServices.fetchCustomersList().subscribe((data: any) => {\n      console.log(data, \"data\")\n      if (data.length !== 0) {\n        this.customersList = data.UserList;\n        console.log(\"this.customersList\",this.customersList)\n\n        this.customersList.forEach((cus)=>{\n            cus._id = cus._id.slice(0,10);\n            cus.fullName= (cus.fullName == '') ?  \"-\" : cus.fullName;\n            cus.email = (cus.email == undefined || cus.email == '' ) ?  \"-\" : cus.email;\n            cus.mobile=(cus.mobile == '') ?  \"-\" : cus.mobile;\n            cus.isAccountActive =(cus.isAccountActive == true) ?  \"Active\" : \"Deactive\";\n\n        })\n\n\n\n        this.source.load(this.customersList);\n      }\n    });\n  }\n\n}\n","<nb-card>\n  <nb-card-header>\n    Regular Customers\n  </nb-card-header>\n\n  <nb-card-body>\n    <ng2-smart-table [settings]=\"settings\" [source]=\"source\" (deleteConfirm)=\"onDeleteConfirm($event)\">\n    </ng2-smart-table>\n  </nb-card-body>\n</nb-card>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TablesComponent } from './tables.component';\nimport { SmartTableComponent } from './smart-table/smart-table.component';\nimport { TreeGridComponent } from './tree-grid/tree-grid.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: TablesComponent,\n  children: [\n    {\n      path: 'smart-table',\n      component: SmartTableComponent,\n    },\n    {\n      path: 'tree-grid',\n      component: TreeGridComponent,\n    },\n  ],\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TablesRoutingModule { }\n\nexport const routedComponents = [\n  TablesComponent,\n  SmartTableComponent,\n  TreeGridComponent,\n];\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngx-tables',\n  template: `<router-outlet></router-outlet>`,\n})\nexport class TablesComponent {\n}\n","import { NgModule } from '@angular/core';\nimport { NbCardModule, NbIconModule, NbInputModule, NbTreeGridModule } from '@nebular/theme';\nimport { Ng2SmartTableModule } from 'ng2-smart-table';\n\nimport { ThemeModule } from '../../@theme/theme.module';\nimport { TablesRoutingModule, routedComponents } from './tables-routing.module';\nimport { FsIconComponent } from './tree-grid/tree-grid.component';\n\n@NgModule({\n  imports: [\n    NbCardModule,\n    NbTreeGridModule,\n    NbIconModule,\n    NbInputModule,\n    ThemeModule,\n    TablesRoutingModule,\n    Ng2SmartTableModule,\n  ],\n  declarations: [\n    ...routedComponents,\n    FsIconComponent,\n  ],\n})\nexport class TablesModule { }\n","import { Component, Input } from '@angular/core';\nimport { NbSortDirection, NbSortRequest, NbTreeGridDataSource, NbTreeGridDataSourceBuilder } from '@nebular/theme';\nimport { SmartTableData } from '../../../@core/data/smart-table';\nimport { LocalDataSource } from 'ng2-smart-table';\n\ninterface TreeNode<T> {\n  data: T;\n  children?: TreeNode<T>[];\n  expanded?: boolean;\n}\n\ninterface FSEntry {\n  name: string;\n  size: string;\n  kind: string;\n  items?: number;\n}\n\n@Component({\n  selector: 'ngx-tree-grid',\n  templateUrl: './tree-grid.component.html',\n  styleUrls: ['./tree-grid.component.scss'],\n})\nexport class TreeGridComponent {\n  customColumn = 'name';\n\n  settings = {\n    editable:false,\n    actions:{\n      add: false,\n      edit:false,\n    },\n    // add: {\n    //   addButtonContent: '<i class=\"nb-plus\"></i>',\n    //   createButtonContent: '<i class=\"nb-checkmark\"></i>',\n    //   cancelButtonContent: '<i class=\"nb-close\"></i>',\n    // },\n    // edit: {\n    //   editButtonContent: '<i class=\"nb-edit\"></i>',\n    //   saveButtonContent: '<i class=\"nb-checkmark\"></i>',\n    //   cancelButtonContent: '<i class=\"nb-close\"></i>',\n    // },\n    delete: {\n      deleteButtonContent: '<i class=\"nb-trash\"></i>',\n      confirmDelete: true,\n    },\n    columns: {\n      id: {\n        title: 'ID',\n        type: 'number',\n      },\n      firstName: {\n        title: 'First Name',\n        type: 'string',\n      },\n      lastName: {\n        title: 'Last Name',\n        type: 'string',\n      },\n      username: {\n        title: 'Username',\n        type: 'string',\n      },\n      email: {\n        title: 'E-mail',\n        type: 'string',\n      },\n      age: {\n        title: 'Age',\n        type: 'number',\n      },\n    },\n  };\n\n  source: LocalDataSource = new LocalDataSource();\n\n\n  defaultColumns = [ 'size', 'kind', 'items' ];\n  allColumns = [ this.customColumn, ...this.defaultColumns ];\n\n  dataSource: NbTreeGridDataSource<FSEntry>;\n\n  sortColumn: string;\n  sortDirection: NbSortDirection = NbSortDirection.NONE;\n\n  constructor(private service: SmartTableData,private dataSourceBuilder: NbTreeGridDataSourceBuilder<FSEntry>) {\n    // this.dataSource = this.dataSourceBuilder.create(this.data);\n    // const data = this.service.getData();\n    // this.source.load(data);\n  }\n\n  updateSort(sortRequest: NbSortRequest): void {\n    this.sortColumn = sortRequest.column;\n    this.sortDirection = sortRequest.direction;\n  }\n\n  getSortDirection(column: string): NbSortDirection {\n    if (this.sortColumn === column) {\n      return this.sortDirection;\n    }\n    return NbSortDirection.NONE;\n  }\n\n  onDeleteConfirm(id){\n\n  }\n\n  private data: TreeNode<FSEntry>[] = [\n    {\n      data: { name: 'Projects', size: '1.8 MB', items: 5, kind: 'dir' },\n      children: [\n        { data: { name: 'project-1.doc', kind: 'doc', size: '240 KB' } },\n        { data: { name: 'project-2.doc', kind: 'doc', size: '290 KB' } },\n        { data: { name: 'project-3', kind: 'txt', size: '466 KB' } },\n        { data: { name: 'project-4.docx', kind: 'docx', size: '900 KB' } },\n      ],\n    },\n    {\n      data: { name: 'Reports', kind: 'dir', size: '400 KB', items: 2 },\n      children: [\n        { data: { name: 'Report 1', kind: 'doc', size: '100 KB' } },\n        { data: { name: 'Report 2', kind: 'doc', size: '300 KB' } },\n      ],\n    },\n    {\n      data: { name: 'Other', kind: 'dir', size: '109 MB', items: 2 },\n      children: [\n        { data: { name: 'backup.bkp', kind: 'bkp', size: '107 MB' } },\n        { data: { name: 'secret-note.txt', kind: 'txt', size: '2 MB' } },\n      ],\n    },\n  ];\n\n  getShowOn(index: number) {\n    const minWithForMultipleColumns = 400;\n    const nextColumnStep = 100;\n    return minWithForMultipleColumns + (nextColumnStep * index);\n  }\n}\n\n@Component({\n  selector: 'ngx-fs-icon',\n  template: `\n    <nb-tree-grid-row-toggle [expanded]=\"expanded\" *ngIf=\"isDir(); else fileIcon\">\n    </nb-tree-grid-row-toggle>\n    <ng-template #fileIcon>\n      <nb-icon icon=\"file-text-outline\"></nb-icon>\n    </ng-template>\n  `,\n})\nexport class FsIconComponent {\n  @Input() kind: string;\n  @Input() expanded: boolean;\n\n  isDir(): boolean {\n    return this.kind === 'dir';\n  }\n}\n","<!-- <nb-card>\n  <nb-card-body>\n\n    <label class=\"search-label\" for=\"search\">Search:</label>\n    <input nbInput [nbFilterInput]=\"dataSource\" id=\"search\" class=\"search-input\">\n\n    <table [nbTreeGrid]=\"dataSource\" [nbSort]=\"dataSource\" (sort)=\"updateSort($event)\">\n\n      <tr nbTreeGridHeaderRow *nbTreeGridHeaderRowDef=\"allColumns\"></tr>\n      <tr nbTreeGridRow *nbTreeGridRowDef=\"let row; columns: allColumns\"></tr>\n\n      <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n        <th nbTreeGridHeaderCell [nbSortHeader]=\"getSortDirection(customColumn)\" *nbTreeGridHeaderCellDef>\n          {{customColumn}}\n        </th>\n        <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n          <ngx-fs-icon [kind]=\"row.data.kind\" [expanded]=\"row.expanded\"></ngx-fs-icon>\n          {{row.data[customColumn]}}\n        </td>\n      </ng-container>\n\n      <ng-container *ngFor=\"let column of defaultColumns; let index = index\"\n                    [nbTreeGridColumnDef]=\"column\"\n                    [showOn]=\"getShowOn(index)\">\n        <th nbTreeGridHeaderCell [nbSortHeader]=\"getSortDirection(column)\" *nbTreeGridHeaderCellDef>\n          {{column}}\n        </th>\n        <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">{{row.data[column] || '-'}}</td>\n      </ng-container>\n\n    </table>\n\n  </nb-card-body>\n</nb-card> -->\n\n<nb-card>\n  <nb-card-header>\n    Prospect Customers\n  </nb-card-header>\n\n  <nb-card-body>\n    <ng2-smart-table [settings]=\"settings\" [source]=\"source\" (deleteConfirm)=\"onDeleteConfirm($event)\">\n    </ng2-smart-table>\n  </nb-card-body>\n</nb-card>\n"]}